/**
 * Build the TrueJ compiler and package it for distribution.
 *
 * According to the Gradle documentation,
 * after building, TrueJ can be run with
 *   gradle run --args="<arguments and filenames here>"
 * for instance, compiling the truej code for a project named "todo" might be
 *   gradle run --args="-genout ../todo/generated/ ../todo/src/main/truej/"
 */

plugins {
  id 'java-library'
  id 'antlr'
}

repositories {
  mavenCentral()
}

project.ext {
    cukeVersion = '6.10.2'
    /* Version 5 of Cucumber produces a test report with better feature headers in a collapsable
     * outline. However, version five requires that a directory name be provided in the
     * @CucumberOptions() of class TestMainCucumberFeatures instead of a file name.
     */

}

dependencies { // https://mvnrepository.com/artifact/...
                // ...org.antlr/antlr4
  antlr              'org.antlr:antlr4:4.8-1'
  implementation     'it.unibo.alice.tuprolog:tuprolog:3.3.0'
  implementation     'org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.600'
  testImplementation 'io.cucumber:cucumber-java:'  + cukeVersion
  testImplementation 'io.cucumber:cucumber-junit:' + cukeVersion
}

generateGrammarSource {
    //maxHeapSize = "64m"
    arguments += ["-visitor", "-no-listener", "-long-messages"
                  // , "-package", "tlang"
                  // , "-o", "tlang"
                 ]

}

java {
    // withJavadocJar() // problems with Gradle 6.6
    // withSourcesJar() // problems with Gradle 6.6
}

//// Used with plugin 'Java'
//tasks.withType(JavaCompile) {
//    //enable compilation in a separate daemon process
//    options.fork = true
//}

//compileJava {
//  options.release = 15 // Defaults to compiler release that is used
//  options.compilerArgs.addAll(['--doclint-format', 'html5'])
//}

sourceSets {
  main {
    java {
      srcDir "src/main/java"
      srcDir "build/generated-src/antlr/main"
    }
  }
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

/** Test all the features, even details and end-to-end tests (but not the prover)
 */
task TestReadyFeatures() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = ( configurations.cucumberRuntime + sourceSets.main.output
                        + sourceSets.test.output )
            args = [ '--plugin', 'progress'
                   , '--plugin', 'html:build/reports/tests/cucumber/ReadyFeatures.html'
                   , '--glue', 'tlang'
                   , '--tags', "@Ready and not @InProcess"
                   , 'src/test/resources/tlang'
                   ]
        }
    }
}

task TestFeaturesInProgress() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = ( configurations.cucumberRuntime + sourceSets.main.output
                        + sourceSets.test.output )
            args = [ '--plugin', 'progress'
                   , '--plugin', 'html:build/reports/tests/cucumber/FeaturesInProgress.html'
                   , '--glue',   'tlang'
                   , '--tags', "@InProgress"
                   , 'src/test/resources/tlang/'
                   ]
        }
    }
}

task CukeHelp () {
  dependsOn assemble, testClasses
  doLast {
    javaexec {
      main = "io.cucumber.core.cli.Main"
      classpath = ( configurations.cucumberRuntime + sourceSets.main.output
                  + sourceSets.test.output )
      args = [ '--help'
             ]
    }
  }

}

task TestProverFeatures() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = ( configurations.cucumberRuntime + sourceSets.main.output
                        + sourceSets.test.output )
            args = [ '--plugin', 'progress'
                   , '--plugin', 'html:build/reports/tests/cucumber/ProverFeatures.html'
                   //, '--glue',   ''
                   , 'src/test/resources/ProofTestFeatures'
                   ]
        }
    }
}

version = '0.0.0'

//// The following will eliminate the errors for duplicated directories/files,
//// which should be fixed in Gradle before I need it.
//task archive(type: Zip) {
//    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
//    ...
//}